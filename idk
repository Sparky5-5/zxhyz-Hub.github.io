-- Key System Script for GitHub Raw URL
-- This script will be hosted at: https://raw.githubusercontent.com/zxhyzHub/zxhyz-Hub.github.io/0b2ed98f24c19bab1e7fe201af38003dc76c6ca1/126884695634066.lua
-- Users will execute: loadstring(game:HttpGet("https://raw.githubusercontent.com/zxhyzHub/zxhyz-Hub.github.io/0b2ed98f24c19bab1e7fe201af38003dc76c6ca1/126884695634066.lua"))()

-- Configuration
local CONFIG = {
    -- Your actual main script URL (the script that runs after key validation)
    MAIN_SCRIPT_URL = "https://raw.githubusercontent.com/zxhyzHub/zxhyz-Hub.github.io/refs/heads/main/idk",
    
    -- Your key link
    KEY_LINK = "https://direct-link.net/1358375/kuLA6Xu5lyNQ",
    
    -- Valid keys
    VALID_KEYS = {
        "SK_7x9m3n8q2p5w"
    },
    
    -- Supported game PlaceIds (leave empty to support all games)
    SUPPORTED_GAMES = {
        -- 126884695634066,  -- Add specific PlaceIds here if needed
    }
}

-- Initialize variables
_G.CheckKey = false
_G.Key = ""

-- Function to check if current game is supported
local function isGameSupported()
    if #CONFIG.SUPPORTED_GAMES == 0 then
        return true -- Support all games if no specific games are listed
    end
    
    for _, placeId in pairs(CONFIG.SUPPORTED_GAMES) do
        if game.PlaceId == placeId then
            return true
        end
    end
    return false
end

-- Function to show notification
local function showNotification(title, text, duration)
    local success = pcall(function()
        game.StarterGui:SetCore("SendNotification", {
            Title = title;
            Text = text;
            Duration = duration or 3;
        })
    end)
    
    if not success then
        -- Fallback notification method
        pcall(function()
            game:GetService("StarterGui"):SetCore("ChatMakeSystemMessage", {
                Text = "[" .. title .. "] " .. text;
                Color = Color3.fromRGB(0, 255, 255);
            })
        end)
    end
end

-- Check if already validated
if _G.CheckKey then
    print("‚úÖ Key already validated! Loading main script...")
    showNotification("Key System", "Key already validated! Loading script...", 3)
    
    -- Load main script directly
    local success, result = pcall(function()
        return game:HttpGet(CONFIG.MAIN_SCRIPT_URL)
    end)
    
    if success then
        loadstring(result)()
        showNotification("Script Loader", "üéâ Script Loaded Successfully! üéâ", 5)
    else
        showNotification("Script Loader", "‚ùå Failed to load main script!", 5)
    end
    return
end

-- Create Key System GUI
local lib = loadstring(game:HttpGet("https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/kav"))()
local window = lib.CreateLib("Key System", "DarkTheme")
local Main = window:NewTab("Key System")
local Section = Main:NewSection("Key System")

-- Make the window draggable and add minimize functionality
spawn(function()
    wait(2) -- Wait for GUI to load
    local success, error = pcall(function()
        local playerGui = game.Players.LocalPlayer.PlayerGui
        
        -- Try different possible GUI names
        local kavoGui = playerGui:FindFirstChild("Kavo") or 
                       playerGui:FindFirstChild("KavoLib") or 
                       playerGui:FindFirstChild("Key System")
        
        if not kavoGui then
            -- Search for any ScreenGui that might be the Kavo interface
            for _, gui in pairs(playerGui:GetChildren()) do
                if gui:IsA("ScreenGui") and gui:FindFirstChild("Main") then
                    kavoGui = gui
                    break
                end
            end
        end
        
        if kavoGui then
            print("Found Kavo GUI: " .. kavoGui.Name)
            
            -- Find the main frame
            local mainFrame = kavoGui:FindFirstChild("Main") or 
                             kavoGui:FindFirstChildOfClass("Frame") or
                             kavoGui:FindFirstChild("Background")
            
            if mainFrame then
                print("Found main frame: " .. mainFrame.Name)
                
                -- Make draggable
                local UIS = game:GetService("UserInputService")
                local dragging = false
                local dragInput, mousePos, framePos
                
                mainFrame.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = true
                        mousePos = input.Position
                        framePos = mainFrame.Position
                    end
                end)
                
                UIS.InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        local delta = input.Position - mousePos
                        mainFrame.Position = UDim2.new(
                            framePos.X.Scale, 
                            framePos.X.Offset + delta.X, 
                            framePos.Y.Scale, 
                            framePos.Y.Offset + delta.Y
                        )
                    end
                end)
                
                UIS.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)
                
                -- Add minimize button
                local minimizeButton = Instance.new("TextButton")
                minimizeButton.Name = "MinimizeButton"
                minimizeButton.Text = "-"
                minimizeButton.Size = UDim2.new(0, 25, 0, 25)
                minimizeButton.Position = UDim2.new(1, -30, 0, 5)
                minimizeButton.BackgroundColor3 = Color3.fromRGB(255, 255, 0)
                minimizeButton.TextColor3 = Color3.fromRGB(0, 0, 0)
                minimizeButton.Font = Enum.Font.SourceSansBold
                minimizeButton.TextSize = 18
                minimizeButton.BorderSizePixel = 0
                minimizeButton.Parent = mainFrame
                
                local isMinimized = false
                local originalSize = mainFrame.Size
                
                minimizeButton.MouseButton1Click:Connect(function()
                    if not isMinimized then
                        mainFrame.Size = UDim2.new(originalSize.X.Scale, originalSize.X.Offset, 0, 35)
                        minimizeButton.Text = "+"
                        isMinimized = true
                        print("Window minimized")
                    else
                        mainFrame.Size = originalSize
                        minimizeButton.Text = "-"
                        isMinimized = false
                        print("Window restored")
                    end
                end)
                
                print("‚úÖ Added draggable and minimize functionality successfully")
            else
                print("‚ùå Could not find main frame")
            end
        else
            print("‚ùå Could not find Kavo GUI")
        end
    end)
    
    if not success then
        print("‚ùå Failed to add draggable/minimize: " .. tostring(error))
    end
end)

-- Copy Key Link Button
Section:NewButton("Copy Key Link", "Paste link in browser to get key", function()
    setclipboard(CONFIG.KEY_LINK)
    print("Key link copied to clipboard!")
    showNotification("Key System", "Key link copied to clipboard!", 3)
end)

-- Key Input Textbox
Section:NewTextBox("Enter Your Key", "Type your key and press ENTER", function(txt)
    print("=== KEY INPUT RECEIVED ===")
    local cleanedKey = tostring(txt or ""):gsub("%s+", ""):gsub("\n", ""):gsub("\r", "")
    _G.Key = cleanedKey
    print("Key stored: '" .. cleanedKey .. "'")
    print("Now click 'VALIDATE KEY' button")
    print("========================")
end)

-- Key Validation Button
Section:NewButton("üîë VALIDATE KEY üîë", "Click to validate your key", function()
    print("=== VALIDATING KEY ===")
    
    -- Get the stored key
    local keyToValidate = _G.Key or ""
    keyToValidate = keyToValidate:gsub("%s+", "")
    
    if keyToValidate == "" or keyToValidate == "nil" then
        print("‚ùå No key found!")
        showNotification("Key System", "‚ùå Please enter a key first!", 5)
        print("Please make sure to:")
        print("1. Type your key in the textbox above")
        print("2. Press ENTER after typing")
        print("3. Then click this button")
        return
    end
    
    print("Checking key: '" .. keyToValidate .. "'")
    
    -- Check if already validated
    if _G.CheckKey == true then
        print("‚úÖ Key already validated!")
        showNotification("Key System", "Key already validated!", 3)
        return
    end
    
    -- Check if key is valid
    local isValid = false
    for _, validKey in pairs(CONFIG.VALID_KEYS) do
        if keyToValidate == validKey then
            isValid = true
            print("‚úÖ Key matches: " .. validKey)
            break
        end
    end
    
    if not isValid then
        print("‚ùå INVALID KEY!")
        print("Your key: '" .. keyToValidate .. "'")
        print("Please check your key and try again.")
        showNotification("Key System", "‚ùå Incorrect Key! Please try again.", 5)
        return
    end
    
    -- Key is valid!
    print("üéâ KEY VALIDATION SUCCESSFUL! üéâ")
    _G.CheckKey = true
    showNotification("Key System", "üéâ Key Validation Successful! üéâ", 3)
    
    -- Check if game is supported (if specific games are configured)
    if not isGameSupported() then
        print("‚ùå Unsupported game")
        print("Current PlaceId: " .. tostring(game.PlaceId))
        showNotification("Script Loader", "‚ùå Unsupported game! PlaceId: " .. tostring(game.PlaceId), 5)
        return
    end
    
    -- Load the main script
    print("Loading main script...")
    showNotification("Script Loader", "Loading main script...", 3)
    
    local success, result = pcall(function()
        return game:HttpGet(CONFIG.MAIN_SCRIPT_URL)
    end)
    
    if success then
        print("Script downloaded successfully!")
        showNotification("Script Loader", "Script downloaded! Executing...", 2)
        
        local executeSuccess, executeError = pcall(function()
            loadstring(result)()
        end)
        
        if executeSuccess then
            print("üéâ SCRIPT LOADED SUCCESSFULLY! üéâ")
            showNotification("Script Loader", "üéâ Script Loaded Successfully! üéâ", 5)
        else
            print("‚ùå Script execution failed: " .. tostring(executeError))
            showNotification("Script Loader", "‚ùå Script execution failed!", 5)
        end
    else
        print("‚ùå Failed to download script: " .. tostring(result))
        showNotification("Script Loader", "‚ùå Failed to download script!", 5)
    end
end)

print("Key System loaded! Please get your key and validate it.")
